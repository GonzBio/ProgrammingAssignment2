m = matrix(c(1,2,3,4) ncol = 2)
m = matrix(c(1,2,3,4), ncol = 2)
m
lapply(m,mean)
lapply(m,function() x)
lapply(m,function(x) x+1)
lapply(m,solve)
matrix(1:6)
test <- makeCasheMatrix(1:10)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##function calculates the inverse of a matrix and stores this value in inv
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL #will store inversed matrix
#stores matrix and inv using superassignment
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix
setinv <- function(inverse) {inv <<- inverse} #called the fisrt time cacheSolve is run
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- lapply(matrix, solve)
x$setinv(inv)
inv
}
test <- makeCasheMatrix(1:10)
test <- makeCacheMatrix(1:10)
test
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##function calculates the inverse of a matrix and stores this value in inv
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL #will store inversed matrix
#stores matrix and inv using superassignment
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix
setinv <- function(inverse) {inv <<- inverse} #called the fisrt time cacheSolve is run
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve)
x$setinv(inv)
inv
}
test <- makeCacheMatrix(1:10)
cacheSolve(test)
matrix(cacheSolve(test))
test <- makeCacheMatrix(1:10, ncol = 2)
test <- makeCacheMatrix((1:10, ncol = 2))
test <- makeCacheMatrix((1:10, ncol = 2)))
test <- makeCacheMatrix(matrix(3,4,5,6,7,3), ncol = 2)
test <- makeCacheMatrix(matrix(3,4,5,6,7,3))
matrix(cacheSolve(test))
matrix(cacheSolve(test))
test <- makeCacheMatrix(3,3,4,5,6,7,7,9)
test <- makeCacheMatrix(1:30)
matrix(cacheSolve(test))
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
matrix(inv) #returns inv (either the saved or the fresly claculated version)
}
test <- makeCacheMatrix(1:30)
matrix(cacheSolve(test))
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x <- matrix(), ...) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
matrix(inv) #returns inv (either the saved or the fresly claculated version)
}
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x <- matrix()) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
matrix(inv) #returns inv (either the saved or the fresly claculated version)
}
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
matrix(inv) #returns inv (either the saved or the fresly claculated version)
}
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix(), ...) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
matrix(inv) #returns inv (either the saved or the fresly claculated version)
}
test <- makeCacheMatrix(1:30, ncol = 2)
matrix(cacheSolve(test))
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix(), ...) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
print(class(inv))
inv #returns inv (either the saved or the fresly claculated version)
}
test <- makeCacheMatrix(1:30, ncol = 2)
matrix(cacheSolve(test))
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix(), ...) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
print(class(inv))
return (matrix(inv), ncol = 2) #returns inv (either the saved or the fresly claculated version)
}
test <- makeCacheMatrix(1:30, ncol = 2)
matrix(cacheSolve(test))
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix(), ...) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
final <- (matrix(inv), ncol = 2) #returns inv (either the saved or the fresly claculated version)
final
}
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix(), ...) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
final <- matrix(inv, ncol = 2) #returns inv (either the saved or the fresly claculated version)
final
}
test <- makeCacheMatrix(1:30, ncol = 2)
matrix(cacheSolve(test))
## These functions will calculate the inverse of a matrix and store it in a value labeled inv.
## If the function has been previously calculated, it will retrieve and return said value to the console.
## This process saves the time it would take to revaluate the input.
## Write a short comment describing this function
##function stores the value of the inverser matris as inv and the matrix by passing it to the global environment.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL #will store inversed matrix
#stores matrix and inv in the global environment using superassignment (<<-)
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x #returns original matrix. Cashesolve will call this function to get the original matrix
setinv <- function(inverse) {inv <<- inverse} #called the first time cacheSolve is run
getinv <- function() inv #used to try and retrieve saved inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##this function first looks if the inverse matrix has been calculated
##previously, if so returns that value. Otherwise, it calculates the
##inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#this section will only return a
inv <- x$getinv() #recovers stored inv, if available
if(!is.null(inv)){
message("getting cashed data")
return(inv)
}
matrix <- x$get() #gets matrix
inv <- sapply(matrix, solve) #calculates the inverse of the matrix
x$setinv(inv) #saves inv
inv #returns inv (either the saved or the fresly claculated version)
}
test <- makeCacheMatrix(1:30)
matrix(cacheSolve(test))
